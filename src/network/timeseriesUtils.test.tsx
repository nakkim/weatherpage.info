import { describe, expect, it } from "vitest";

import { IResultData } from "./timeseries";
import { formatDataToEcharts, subtractHours } from "./timeseriesUtils";

describe("timeseriesUtils", () => {
  describe("subtractHours", () => {
    it("should return updated date when given a valid date and a positive number of hours", () => {
      const date = new Date("2022-01-01T12:00:00Z");
      const hours = 3;
      const result = subtractHours(date, hours);
      expect(result).toEqual(new Date("2022-01-01T09:00:00Z"));
    });

    it("should return the same date when given a valid date and a zero number of hours", () => {
      const date = new Date("2022-01-01T12:00:00Z");
      const hours = 0;
      const result = subtractHours(date, hours);
      expect(result).toEqual(new Date("2022-01-01T12:00:00Z"));
    });

    it("should add the absolute value of the hours to the date and return the updated date when given a valid date and a negative number of hours", () => {
      const date = new Date("2022-01-01T12:00:00Z");
      const hours = -3;
      const result = subtractHours(date, hours);
      expect(result).toEqual(new Date("2022-01-01T15:00:00Z"));
    });

    it("should return updated date when given a valid date and a number of hours greater than 24", () => {
      const date = new Date("2022-01-01T12:00:00Z");
      const hours = 27;
      const result = subtractHours(date, hours);
      expect(result).toEqual(new Date("2021-12-31T09:00:00Z"));
    });
  });

  // Generated by CodiumAI

  describe("formatDataToEcharts", () => {
    const mockData: IResultData[] = [
      {
        "name": "Kauhajoki Kuja-Kokko",
        "time": "2023-12-02T10:20:00",
        "lat": 62.4134483,
        "lon": 22.1837196,
        "region": "Kauhajoki",
        "fmisid": 101289,
        "ri_10min": 0,
        "ws_10min": 1.8,
        "wg_10min": 2.5,
        "wd_10min": 17,
        "vis": 6930,
        "wawa": 71,
        "t2m": -8.3,
        "n_man": 8,
        "r_1h": 0,
        "snow_aws": 18,
        "pressure": 1010.8,
        "rh": 91,
        "dewpoint": -9.4,
        "ws_1d": 2.9,
        "wg_1d": 4.7,
        "tmax": -8.1,
        "tmin": -10.2,
        "r_1d": 0.1
        },
    ];

    // Should return an array of arrays with correct dimensions
    it("should return an array of arrays with correct dimensions", () => {
      const result: (string | number | null)[][] = formatDataToEcharts(mockData);
      expect(result).toHaveLength(1);
      expect(result[0]).toHaveLength(18);
    });

    it("should return an array of arrays with correct values", () => {
      const result: (string | number | null)[][] = formatDataToEcharts(mockData);
      expect(result[0][0]).toEqual("2023-12-02T10:20:00Z");
      expect(result[0][1]).toEqual(1.8);
      expect(result[0][2]).toEqual(2.5);
      expect(result[0][3]).toEqual(17);
      expect(result[0][4]).toEqual(2.9);
      expect(result[0][5]).toEqual(4.7);
      expect(result[0][6]).toEqual(71);
      expect(result[0][7]).toEqual(6930);
      expect(result[0][8]).toEqual(-8.3);
      expect(result[0][9]).toEqual(-10.2);
      expect(result[0][10]).toEqual(-8.1);
      expect(result[0][11]).toEqual(0);
      expect(result[0][12]).toEqual(0);
      expect(result[0][13]).toEqual(0.1);
      expect(result[0][14]).toEqual(91);
      expect(result[0][15]).toEqual(1010.8);
      expect(result[0][16]).toEqual(-9.4);
      expect(result[0][17]).toEqual(8);
    });
  });
});
